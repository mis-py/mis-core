name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  tests:
    name: Pylint and Pytest check
    runs-on: ubuntu-latest
    container: python:3.12.6

    services:
      redis:
        image: redis:7.0.10-alpine
      postgres:
        image: postgres:15.2-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tests
      rabbitmq:
        image: rabbitmq:3.11.13-alpine
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: mongodb
          MONGO_INITDB_ROOT_PASSWORD: mongodb
          MONGO_INITDB_DATABASE: mis

    steps:
    - uses: actions/checkout@v4
    
    - name: Install and configure Poetry
      run: |
        pip install --upgrade pip setuptools pytest-md pytest-emoji
        pip install -U pip poetry
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: |
        poetry install --with test
    
    - name: Perform Pylint Analysis
      run: |
        echo "::group::..."
        echo "# Pylint Report" >> $GITHUB_STEP_SUMMARY

        echo "$(pylint core/ libs/ modules/)" >> $GITHUB_STEP_SUMMARY

        echo "::endgroup::"

    #- name: Migrate DB
    #  run: uv run bash scripts/prestart.sh
    #  working-directory: backend

    - uses: pavelzw/pytest-action@v2
      with:
        emoji: false
        verbose: true
        job-summary: true
        click-to-expand: false
      env: 
        ENVIRONMENT: TEST
        POSTGRES_HOST: postgres
        POSTGRES_DB: tests_{}
        REDIS_URI: redis://redis
        RABBITMQ_URI: amqp://guest:guest@rabbitmq:5672/
        MONGO_HOST: mongodb
        MONGO_INITDB_ROOT_USERNAME: mongodb
        MONGO_INITDB_ROOT_PASSWORD: mongodb
        MONGO_INITDB_DATABASE: mis

  security:
    name: Check for vulnerabilities
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12.6
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.6"

      - name: Install and configure Poetry
        run: |
          pip install --upgrade pip setuptools
          pip install -U pip poetry
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: |
          poetry install --with test

      - name: Perform Bandit Analysis
        run: |
          echo "::group::..."
          echo "# Bandit Report" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to expand!</summary>" >> $GITHUB_STEP_SUMMARY
          echo "$(bandit -r core/ libs/ modules/)" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"

      - name: Log into docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ vars.IMAGE_NAME }}:test

      - name: Docker Scout
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          image: ${{ vars.IMAGE_NAME }}:test
          write-comment: false

